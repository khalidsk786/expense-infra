pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        // Timeout counter starts AFTER agent is allocated
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm') //for enable colors
        //retry(1)
    }
        //parameters
      parameters {
        
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'select action')
    }
    // environment {
    //     ACTION = "${params.ACTION}"
    // }
    stages {
        stage('Init and Plan') {
            steps {
              withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                sh """
                    cd 10-sg
                    terraform init -reconfigure
                    terraform plan -out=tfplan
                """    
             }
           }
        }

        stage('Apply and Destroy') {
            // input {
            //     message "Should we continue? to ${params.ACTION}"
            //     ok "Yes, we should."
            // }

            steps {

              withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                sh """
                    cd 10-sg
                    if [ ${params.ACTION} == "apply" ];
                    then
                        terraform apply -auto-approve tfplan

                    elif [ ${params.ACTION} == "destroy" ];
                    then
                        terraform destroy -auto-approve
                    fi
                """
             }
           }
        }

         stage ('Destroy VPC') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps{
                build job: '00-vpc', parameters: [string(name: 'ACTION', value: "destroy")], wait: false
            }
        }

         stage('Parallel in Sequestial') {
            when {
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('Bastion') {
                    steps {
                        build job: '20-bastion', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('RDS') {
                    steps {
                        build job: '30-rds', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('EKS') {
                    steps {
                        build job: '40-eks', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                
                stage('ECR') {
                    steps {
                        build job: '70-ecr', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
        }

        stage('Sequential') {
            when {
                expression { params.ACTION == 'apply' }
            }
            stages {
                stage('ACM') {
                    steps {
                        build job: '50-acm', parameters: [string(name: 'ACTION', value: "apply")]
                    }
                }
                stage('ALB') {
                    steps {
                        build job: '60-ingress-alb', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('CDN') {
                    steps {
                        build job: '80-cdn', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
                
        }

    }

     post{
      always{
        echo "This action run always"
        deleteDir()
      }

      success{
  
         echo "This section run when pipeline success"
      }

      failure{
          echo "This action run when pipeline failure"

      }
    }
}