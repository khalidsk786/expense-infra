pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        // Timeout counter starts AFTER agent is allocated
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm') //for enable colors
        //retry(1)
    }
        //parameters
      parameters {
        
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'select action')
    }
    // environment {
    //     ACTION = "${params.ACTION}"
    // }
    stages {
        stage('Init and Plan') {
            steps {
              withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                sh """
                    cd 00-vpc
                    terraform init -reconfigure
                    terraform plan -out=tfplan
                """    
             }
           }
        }

        stage('Apply and Destroy') {
            input {
                message "Should we continue? to ${params.ACTION}"
                ok "Yes, we should."
            }

            steps {

              withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                sh '''
                    cd 00-vpc
                    if [${params.ACTION} == "apply"];
                    then
                        terraform apply -auto-approve tfplan

                    elif [${params.ACTION} == "destroy"];
                    then
                        terraform destroy -auto-approve
                    fi
                '''    
             }
           }
        }
    }

     post{
      always{
        echo "This action run always"
        deleteDir()
      }

      success{
  
         echo "This section run when pipeline success"
      }

      failure{
          echo "This action run when pipeline failure"

      }
    }
}